<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
#region License
//
// Servant
//
// Copyright 2016-2018 Drew Noakes
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
// More information about this project is available at:
//
//    https://github.com/drewnoakes/servant
//
#endregion

using System;
using System.Threading.Tasks;

namespace Servant
{
    // NOTE this file is generated

    public static partial class ServantExtensions
    {
        #region AddTransient

<#
var numbers  = new[] { "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen" };
var numberth = new[] { "first", "second", "third", "fourth", "fifth", "sixth", "seventh", "eighth", "nineth", "tenth", "eleventh", "twelfth", "thirteenth", "fourteenth", "fifteenth", "sixteenth" };
for (var count = 1; count <= 16; count++)
{
    var typeNames  = string.Join(", ", Enumerable.Range(1, count).Select(n => $"T{n}"));
    var typeValues = string.Join(", ", Enumerable.Range(1, count).Select(n => $"typeof(T{n})"));
    var args       = string.Join(", ", Enumerable.Range(1, count).Select(n => $"(T{n})args[{n-1}]"));
    var depCount   = $"{numbers[count-1]} {(count == 1 ? "dependency" : "dependencies")}";
#>
        /// <summary>
        /// Registers type <typeparamref name="TInstance"/> with <see cref="Lifestyle.Transient"/> lifestyle
        /// to be provided via callback function <paramref name="func"/> which has <#= depCount #>.
        /// </summary>
<# for (var i = 1; i <= count; i++) { #>
        /// <typeparam name="T<#=i#>">The <#= numberth[i-1] #> dependency type.</typeparam>
<# } #>
        /// <typeparam name="TInstance">The type to register.</typeparam>
        /// <param name="servant">The <see cref="Servant"/> to register the type/function with.</param>
        /// <param name="func">A function that provides an instance of <typeparamref name="TInstance"/> when passed <#= depCount #>.</param>
        public static void AddTransient<<#= typeNames #>, TInstance>(this Servant servant, Func<<#= typeNames #>, TInstance> func)
        {
            servant.Add(
                Lifestyle.Transient,
                typeof(TInstance),
                args => Task.FromResult((object)func(<#= args #>)),
                new[] {<#= typeValues #>});
        }

        /// <summary>
        /// Registers type <typeparamref name="TInstance"/> with <see cref="Lifestyle.Transient"/> lifestyle
        /// to be provided via asynchronous callback function <paramref name="func"/> which has <#= depCount #>.
        /// </summary>
        /// <typeparam name="TInstance">The type to register.</typeparam>
<# for (var i = 1; i <= count; i++) { #>
        /// <typeparam name="T<#=i#>">The <#= numberth[i-1] #> dependency type.</typeparam>
<# } #>
        /// <param name="servant">The <see cref="Servant"/> to register the type/function with.</param>
        /// <param name="func">A function that asynchronously provides an instance of <typeparamref name="TInstance"/> via a <see cref="Task{TResult}"/> when passed <#= depCount #>.</param>
        public static void AddTransient<<#= typeNames #>, TInstance>(this Servant servant, Func<<#= typeNames #>, Task<TInstance>> func)
        {
            servant.Add(
                Lifestyle.Transient,
                typeof(TInstance),
                args => TaskUtil.Downcast(func(<#= args #>)),
                new[] {<#= typeValues #>});
        }

<# } #>

        #endregion

        #region AddSingleton

<#
for (var count = 1; count <= 16; count++)
{
    var typeNames  = string.Join(", ", Enumerable.Range(1, count).Select(n => $"T{n}"));
    var typeValues = string.Join(", ", Enumerable.Range(1, count).Select(n => $"typeof(T{n})"));
    var args       = string.Join(", ", Enumerable.Range(1, count).Select(n => $"(T{n})args[{n-1}]"));
    var depCount   = $"{numbers[count-1]} {(count == 1 ? "dependency" : "dependencies")}";
#>
        /// <summary>
        /// Registers type <typeparamref name="TInstance"/> with <see cref="Lifestyle.Singleton"/> lifestyle
        /// to be provided via callback function <paramref name="func"/> which has <#= depCount #>.
        /// </summary>
        /// <typeparam name="TInstance">The type to register.</typeparam>
<# for (var i = 1; i <= count; i++) { #>
        /// <typeparam name="T<#=i#>">The <#= numberth[i-1] #> dependency type.</typeparam>
<# } #>
        /// <param name="servant">The <see cref="Servant"/> to register the type/function with.</param>
        /// <param name="func">A function that provides the singleton instance of <typeparamref name="TInstance"/> when passed <#= depCount #>.</param>
        public static void AddSingleton<<#= typeNames #>, TInstance>(this Servant servant, Func<<#= typeNames #>, TInstance> func)
        {
            servant.Add(
                Lifestyle.Singleton,
                typeof(TInstance),
                args => Task.FromResult((object)func(<#= args #>)),
                new[] {<#= typeValues #>});
        }

        /// <summary>
        /// Registers type <typeparamref name="TInstance"/> with <see cref="Lifestyle.Singleton"/> lifestyle
        /// to be provided via asynchronous callback function <paramref name="func"/> which has <#= depCount #>.
        /// </summary>
        /// <typeparam name="TInstance">The type to register.</typeparam>
<# for (var i = 1; i <= count; i++) { #>
        /// <typeparam name="T<#=i#>">The <#= numberth[i-1] #> dependency type.</typeparam>
<# } #>
        /// <param name="servant">The <see cref="Servant"/> to register the type/function with.</param>
        /// <param name="func">A function that asynchronously provides the singleton instance of <typeparamref name="TInstance"/> via a <see cref="Task{TResult}"/> when passed <#= depCount #>.</param>
        public static void AddSingleton<<#= typeNames #>, TInstance>(this Servant servant, Func<<#= typeNames #>, Task<TInstance>> func)
        {
            servant.Add(
                Lifestyle.Singleton,
                typeof(TInstance),
                args => TaskUtil.Downcast(func(<#= args #>)),
                new[] {<#= typeValues #>});
        }

<# } #>

        #endregion
    }
}
